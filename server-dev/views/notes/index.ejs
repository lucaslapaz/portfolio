<!DOCTYPE html>
<html lang="pt">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>My Notes</title>
    <link rel="stylesheet" href="/assets/style.css">
    <link rel="icon" type="image/png" href="/icons/letra-l.png">
    <!-- <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/github-markdown-css/5.1.0/github-markdown-light.min.css" /> -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/github-markdown-css/5.1.0/github-markdown-dark.min.css" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/katex@0.16.8/dist/katex.min.css">
     
</head>

<body class="body-fullscreen">
    <main class="main-notes-section">
        <div class="notes-wrapper">
            <section class="notes-section">
                <div class="notes-navbar__left-container">
                    <div class="notes-navbar">
                        <a class="notes-navbar__item" href="/">Home</a>
                        <a class="notes-navbar__item" href="/blog">Blog</a>
                        <a class="notes-navbar__item" href="https://github.com/lucaslapaz/portfolio">This Repository</a>
                        <a class="notes-navbar__item" href="/login">Login</a>
                    </div>
                    <div class="notes-section__list-items"></div>
                </div>
                <div class="notes-section__file-container">
                    <div class="file-content__top-bar"></div>
                    <div class="file-content__text markdown-body"></div>
                </div>
            </section>
        </div>
    </main>

    <script src="/assets/script.js"></script>
    <script src="/assets/marked.min.js"></script>

    <script src="https://cdn.jsdelivr.net/npm/katex@0.16.8/dist/katex.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/katex@0.16.8/dist/contrib/auto-render.min.js"></script>
    <script>
        let itemsListContainer;
        let fileTextDiv;
        let topBarDiv;
        let activeListItem;
        let processingItemClickEvent = false;
        let leftContainer;
        const contentCache = new Map();
        const listCache = new Map();
    
        /*
        <div class="list-items__file list-items__item">
            <div class="item-icon">
                <svg width="10" viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg" version="1.1">
                    <path style="fill:#ffffff;stroke:none;" d="m 65,3 0,19 19,0 z"/>
                    <path style="fill:#EBEBDA;stroke:#777777;stroke-width:2;" d="m 65,3 0,19 19,0 0,74 -72,0 0,-93 53,0 19,19"/>
                    <path style="fill:#EBEBDA;stroke:#777777;stroke-width:8;" d="M 25,70 25,30 35,55 45,30 45,70 M 55,70 55,33 Q 70,33 70,48 Q 70,68 55,66 z"/>
                </svg>
            </div>
            <p class="item__name">
                TypeScript - Configuração.md
            </p>
        </div>

            <div class="top-bar__file-name">
                <p>Nome do arquivo.md</p>
            </div>
        */

        /**
         * Obtém uma lista de metadados dos arquivos do repositório
         * @param path Caminho da pasta a se buscar os arquivos
         * @returns Uma lista com metadados dos arquivos no path especificado
         */
        async function getMetadataList(path = "/"){
            try{
                let url = path ? "/notes/metadata-list?path=" + encodeURIComponent(path) : "/notes/metadata-list"

                const request = await fetch(url);
                if(request.ok){
                    let listItems;

                    if(listCache.has(path)){
                        listItems = listCache.get(path);
                    }else{
                        const payload = await request.json();
                        const success = payload.succes;
                        listItems = payload.data;
                        listCache.set(path, listItems);
                    }
                    return listItems;
                }
                return null;
            }catch(err){
                console.error(err.message);
                showToast("error", "Falha ao obter a lista de arquivos. Recarregue a página e tente novamente.");
            }
        }

        async function getFileMetadata(path){

            try{
                if(!path){
                    console.error("O path deve ser passado");
                    return;
                }

                let content;
                if(contentCache.has(path)){
                    content = contentCache.get(path);
                    return content;
                }

                let url = "/notes/file-content?path=" + encodeURIComponent(path);

                const request = await fetch(url);
                if(request.ok){
                    const payload = await request.json();
                    const data = payload.data;
                    content = data.content;
                    contentCache.set(path, content);
                    return content;
                }
                return null;
            }catch(err){
                console.log('Error: ' + err);
                showToast("error", "Falha ao obter o conteúdo do arquivo. Recarregue a página e tente novamente.");
            }
        }

        function changeFileName(fileNameData){
            let fileNameDiv = topBarDiv.querySelector('.top-bar__file-name');

            if(!fileNameDiv){
                fileNameDiv = document.createElement('div');
                fileNameDiv.setAttribute("class", "top-bar__file-name");

                const iconDiv = document.createElement("div");
                iconDiv.className = "item-icon";
                iconDiv.innerHTML = `
                    <svg class="item-icon__svg width="10" viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg" version="1.1">
                        <path style="fill:#ffffff;stroke:none;" d="m 65,3 0,19 19,0 z"/>
                        <path style="fill:#EBEBDA;stroke:#777777;stroke-width:2;" d="m 65,3 0,19 19,0 0,74 -72,0 0,-93 53,0 19,19"/>
                        <path style="fill:#EBEBDA;stroke:#777777;stroke-width:8;" d="M 25,70 25,30 35,55 45,30 45,70 M 55,70 55,33 Q 70,33 70,48 Q 70,68 55,66 z"/>
                    </svg>
                `;
                const nameP = document.createElement("p"); 
                nameP.className = "file-name__p"
                fileNameDiv.appendChild(iconDiv);
                fileNameDiv.appendChild(nameP);
                topBarDiv.appendChild(fileNameDiv)
            }

            const nameP = topBarDiv.querySelector(".file-name__p");
            nameP.textContent = fileNameData;
        }

        function setActiveListItem(listItem){
            if(activeListItem){
                activeListItem.removeAttribute("data-active");
            }
            listItem.setAttribute('data-active', 'true');
            activeListItem = listItem;
        }

        async function loadFileContent(path){
            let content = await getFileMetadata(path);
            let formatted = marked.parse(content);
            fileTextDiv.innerHTML = formatted;

            renderMathInElement(fileTextDiv, {
                delimiters: [
                    {left: "$$", right: "$$", display: true},
                    {left: "$", right: "$", display: false}
                ]
            });
            fileTextDiv.scrollTop = 0;
        }
        
        async function itemClickHandler(e){
            if(processingItemClickEvent == true){
                return;
            }

            const listItem = e.target.closest('.list-items__item');

            /**
            * Verificação necessária pois clicar na barra de rolagem também lança evento 
            * e o listItem ficaria undefined.
            **/
            if(!listItem){
                return;
            }

            processingItemClickEvent = true;

            const type = listItem.getAttribute("data-type");
            const path = listItem.getAttribute("data-path");

            if(type == "file"){
                let fileNameData = listItem.getAttribute("data-file-name");
                await loadFileContent(path);
                changeFileName(fileNameData);
                setActiveListItem(listItem);
            }
            else if(type=="dir"){
                const status = listItem.getAttribute("data-status");
                if(status == "open"){
                    const container = document.querySelector(`[data-folder-parent="${path}"]`);
                    if(container){
                        // container.parentNode.removeChild(container)
                        container.style['display'] = 'none';
                    }
                    listItem.setAttribute("data-status", "closed");
                }

                if(status == "closed"){
                    const container = document.querySelector(`[data-folder-parent="${path}"]`);
                    if(container){
                        container.style['display'] = 'block';
                        listItem.setAttribute("data-status", "open"); 
                    }else{
                        const listItems = await getMetadataList(path);
                        if(listItems != null && listItems.length > 0){
                            const fragment = createAllListItems(listItems, path);
                            listItem.parentNode.insertBefore(fragment, listItem.nextSibling);
                            listItem.setAttribute("data-status", "open"); 
                        }
                    }
                }
            }else{
                console.erro("Tipo de item desconhecido.")
            }
            processingItemClickEvent =false;
        }

        function createAllListItems(listItems, path){

            if(!listItems || listItems.length == 0){
                return null;
            }

            // const fragment = document.createDocumentFragment();
            const itemsContainer = document.createElement('div');
            const levelRegex = /[^\\/]+/g;
            const levelMatches = path.match(levelRegex)
            const level = levelMatches ? levelMatches.length + 1 : 1;
            itemsContainer.setAttribute("data-folder-parent", path);
            itemsContainer.className = `list-items__container`;

            for(let item of listItems){
                const itemDiv = document.createElement("div");
                const className = item.type == "file" ? "list-items__item list-items__file" : "list-items__item list-items__dir";
                itemDiv.className = className;
                itemDiv.setAttribute("data-type", item.type)
                itemDiv.setAttribute("data-path", item.path);
                itemDiv.style["padding"] = `.4rem ${2*level}rem`

                const iconDiv = document.createElement("div");
                iconDiv.className = "item-icon";
                if(item.type === "file"){
                    itemDiv.setAttribute("data-file-name", item.name);
                    iconDiv.innerHTML = `
                        <svg class="item-icon__svg width="10" viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg" version="1.1">
                            <path style="fill:#ffffff;stroke:none;" d="m 65,3 0,19 19,0 z"/>
                            <path style="fill:#EBEBDA;stroke:#777777;stroke-width:2;" d="m 65,3 0,19 19,0 0,74 -72,0 0,-93 53,0 19,19"/>
                            <path style="fill:#EBEBDA;stroke:#777777;stroke-width:8;" d="M 25,70 25,30 35,55 45,30 45,70 M 55,70 55,33 Q 70,33 70,48 Q 70,68 55,66 z"/>
                        </svg>
                    `;
                }else{
                    itemDiv.setAttribute("data-status", "closed");
                    iconDiv.innerHTML = `
                        <svg class="item-icon__svg item-icon__svg--closed" display="none" width="10" viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg" version="1.1">
                            <path style="fill:#D0CEA9;stroke:#222222;stroke-width:2" d="M 4,88 C 4,87 3.6,25 3.6,25 3.6,25 3,20 8,20 c -1,0 6,0 6,0 l 0,-6 c 0,0 0,-3 3,-3 l 17,0 c 0,0 3,0 3,3 l 0,6 43,0 c 0,0 4,0 4,4 l -2,64 z"/>
                            <path style="fill:#E8DC88;stroke:#222222;stroke-width:2;fill-opacity:0.8" d="M 4,88 15,40 c 0,0 0,-7 8,-7 10,0 66,0 66,0 0,0 9,-1 7,6 -2,7 -12,49 -12,49 z"/>
                        </svg>

                        <svg class="item-icon__svg item-icon__svg--open" display="none" width="10" viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg" version="1.1">
                            <path style="fill:#D9D58F;stroke:#222;stroke-width:2" d="m 2,88 c 0,-1 0,-63 0,-63 0,0 -0.6,-5 4.4,-5 -1,0 5.6,0 5.6,0 l 0,-6 c 0,0 0,-3 3,-3 l 17,0 c 0,0 3,0 3,3 l 0,6 43,0 c 0,0 4,0 4,4 l 0,64 z"/>
                            <path style="fill:#E8DC88;stroke:#222;stroke-width:2;fill-opacity:0.7" d="M 2,88 17,54 c 0,0 1,-5 9,-5 11,0 65,0 65,0 0,0 9,0 7,5 -2,5 -14,34 -14,34 z"/>
                        </svg>
                    `;
                }

                const nameP = document.createElement("p");
                nameP.className = "item__name";
                nameP.textContent = item.name;
                
                itemDiv.appendChild(iconDiv);
                itemDiv.appendChild(nameP);
                itemsContainer.appendChild(itemDiv);
            }
            return itemsContainer;
        }

        let mouseIsDown = false;
        let resizingLeftBar = false;
        let xDifference;
        function resizeLeftBar(e){
            const containerRect = leftContainer.getBoundingClientRect();
            const containerWidth = containerRect.width;
            const containerX = containerRect.x;

            let inside = (e.clientX > containerWidth + containerX && e.clientX < containerWidth + containerX + 10);

            if(inside){
                document.body.style['cursor'] = 'ew-resize';
            }else{
                document.body.style['cursor'] = "default"
            }

            if(mouseIsDown){
                if(inside && resizingLeftBar == false){
                    resizingLeftBar = true;
                    xDifference = e.clientX - (containerWidth + containerX);
                }
            }else{
                resizingLeftBar = false;
            }

            if(resizingLeftBar){
                leftContainer.style["width"] = (e.clientX - xDifference - containerX) + "px";
            }
        }

        document.addEventListener("DOMContentLoaded", async function(){
            listItemsContainer = document.querySelector(".notes-section__list-items");
            fileTextDiv = document.querySelector(".file-content__text");
            topBarDiv = document.querySelector(".file-content__top-bar");
            leftContainer = document.querySelector('.notes-navbar__left-container');

            window.addEventListener("mousemove", resizeLeftBar);
            window.addEventListener("mousedown", (e) => { e.preventDefault(); mouseIsDown = true; });
            window.addEventListener("mouseup", (e) => { mouseIsDown = false; });

            listItemsContainer.addEventListener("mousedown", itemClickHandler);

            const listItems = await getMetadataList("/");
            if(listItems != null && listItems.length > 0){
                const containerDiv = createAllListItems(listItems, "/");
                listItemsContainer.appendChild(containerDiv);
            }

            const readme = document.querySelector('[data-file-name="README.md"]');
            readme.dispatchEvent(new MouseEvent("mousedown", { bubbles: true }));
            readme.dispatchEvent(new MouseEvent("mouseup", { bubbles: true }));

        })
    </script>
</body>

</html>