-- MySQL dump 10.13  Distrib 8.0.41, for Win64 (x86_64)
--
-- Host: localhost    Database: blog_db
-- ------------------------------------------------------
-- Server version	8.0.41

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!50503 SET NAMES utf8mb4 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `posts`
--

DROP TABLE IF EXISTS `posts`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `posts` (
  `id` int NOT NULL AUTO_INCREMENT,
  `user_id` int NOT NULL,
  `title` varchar(200) COLLATE utf8mb4_unicode_ci NOT NULL,
  `formatted_title` varchar(200) COLLATE utf8mb4_unicode_ci NOT NULL,
  `content` text COLLATE utf8mb4_unicode_ci NOT NULL,
  `creation_date` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `is_listed` tinyint(1) NOT NULL DEFAULT '1',
  `description` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  PRIMARY KEY (`id`),
  UNIQUE KEY `formatted_title` (`formatted_title`),
  KEY `user_id` (`user_id`),
  CONSTRAINT `posts_ibfk_1` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON DELETE RESTRICT ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=18 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `posts`
--

LOCK TABLES `posts` WRITE;
/*!40000 ALTER TABLE `posts` DISABLE KEYS */;
INSERT INTO `posts` VALUES (1,1,'What is Lorem Ipsum?','what-is-lorem-ipsum','<p>&nbsp;&nbsp;&nbsp;&nbsp;Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry\'s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.</p><br>\n\n<h2>Where does it come from?</h2>\n\n<p>&nbsp;&nbsp;&nbsp;&nbsp;Contrary to popular belief, Lorem Ipsum is not simply random text. It has roots in a piece of classical Latin literature from 45 BC, making it over 2000 years old. Richard McClintock, a Latin professor at Hampden-Sydney College in Virginia, looked up one of the more obscure Latin words, consectetur, from a Lorem Ipsum passage, and going through the cites of the word in classical literature, discovered the undoubtable source. Lorem Ipsum comes from sections 1.10.32 and 1.10.33 of \"de Finibus Bonorum et Malorum\" (The Extremes of Good and Evil) by Cicero, written in 45 BC. This book is a treatise on the theory of ethics, very popular during the Renaissance. The first line of Lorem Ipsum, \"Lorem ipsum dolor sit amet..\", comes from a line in section 1.10.32.</p><br>\n\n<h2>Where can I get some?</h2>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;There are many variations of passages of Lorem Ipsum available, but the majority have suffered alteration in some form, by injected humour, or randomised words which don\'t look even slightly believable. If you are going to use a passage of Lorem Ipsum, you need to be sure there isn\'t anything embarrassing hidden in the middle of text. All the Lorem Ipsum generators on the Internet tend to repeat predefined chunks as necessary, making this the first true generator on the Internet. It uses a dictionary of over 200 Latin words, combined with a handful of model sentence structures, to generate Lorem Ipsum which looks reasonable. The generated Lorem Ipsum is therefore always free from repetition, injected humour, or non-characteristic words etc.</p>','2025-06-22 09:58:42',1,'Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry\'s standard dummy text ever since the 1500s.'),(2,1,'Álgebra booleana','algebra-booleana','<p>A seguir, está a versão expandida e <strong>inteiramente explicada</strong> da <strong>Álgebra Booleana</strong>, com tudo destrinchado: <strong>símbolos, leis, justificativas e raciocínios por trás das equações</strong>. Respira fundo, porque vamos mergulhar no maravilhoso mundo onde 1 + 1 pode ser 1, mas 1 ⊕ 1 dá 0, e ninguém acha isso estranho.</p><br>\n\n<h2><b>📘 Forma Canônica Disjuntiva (Soma de Produtos)</b></h2>\n\n<h3><b>🧩 Definição</b></h3>\n\n<p>A <strong>forma canônica disjuntiva</strong>, também chamada de <strong>Soma de Produtos</strong> (<em>Sum of Products</em> ou <strong>SoP</strong>), é um método para representar <strong>funções booleanas</strong> como uma expressão algébrica. Essa forma expressa a função como uma <strong>soma lógica (OR)</strong> de vários <strong>termos produto (AND)</strong>. Cada termo representa uma <strong>combinação específica de variáveis</strong> de entrada que produz uma saída igual a 1.</p><br>\n\n<h3><b>🎯 Objetivo</b></h3>\n\n<p>Transformar uma <strong>tabela verdade</strong> em uma expressão algébrica booleana <strong>primitiva</strong>, ou seja, sem qualquer simplificação inicial, apenas baseada na definição lógica da função.</p><br>\n\n<h3><b>🧠 Etapas do Método</b></h3>\n\n<ol>\n<li><strong>Listar a tabela verdade completa</strong> com todas as combinações possíveis de entradas (2ⁿ combinações, onde n é o número de variáveis).</li>\n<li><strong>Selecionar somente as linhas onde a saída é igual a 1</strong> (ou seja, os casos \'verdadeiros\' da função).</li>\n<li><strong>Para cada linha selecionada</strong>:\n<ul>\n<li>Escrever um <strong>termo do tipo produto</strong> (ou mintermo):\n<ul>\n<li>Usar a variável <strong>sem negação (A)</strong> se o valor dela for 1.</li>\n<li>Usar a variável <strong>negada (¬A)</strong> se o valor for 0.</li>\n<li>Conectar essas variáveis com o operador AND (·).</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>Unir todos os termos com o operador OR (+)</strong> para obter a função completa.</li>\n</ol><br>\n\n<h3><b>🧪 Exemplo Detalhado</b></h3>\n\n<p>Considere uma função booleana com 3 variáveis de entrada: A, B e C.</p><br>\n\n<h3><b>🧾 Tabela Verdade</b></h3>\n\n<table border=\'1\'>\n<thead>\n<tr>\n<th>A</th>\n<th>B</th>\n<th>C</th>\n<th>Saída F</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>0</td><td>0</td><td>0</td><td>0</td></tr>\n<tr><td>0</td><td>0</td><td>1</td><td>1</td></tr>\n<tr><td>0</td><td>1</td><td>0</td><td>0</td></tr>\n<tr><td>0</td><td>1</td><td>1</td><td>1</td></tr>\n<tr><td>1</td><td>0</td><td>0</td><td>1</td></tr>\n<tr><td>1</td><td>0</td><td>1</td><td>0</td></tr>\n<tr><td>1</td><td>1</td><td>0</td><td>1</td></tr>\n<tr><td>1</td><td>1</td><td>1</td><td>0</td></tr>\n</tbody>\n</table>\n\n<h3><b>🔍 Seleção das linhas com Saída = 1:</b></h3>\n\n<ol>\n<li>Linha 2: A = 0, B = 0, C = 1 → <strong>¬A · ¬B · C</strong></li>\n<li>Linha 4: A = 0, B = 1, C = 1 → <strong>¬A · B · C</strong></li>\n<li>Linha 5: A = 1, B = 0, C = 0 → <strong>A · ¬B · ¬C</strong></li>\n<li>Linha 7: A = 1, B = 1, C = 0 → <strong>A · B · ¬C</strong></li>\n</ol><br>\n\n<h3><b>🧾 Expressão Booleana Primitiva</b></h3>\n\n<p>F(A, B, C) = ¬A·¬B·C + ¬A·B·C + A·¬B·¬C + A·B·¬C</p><br>\n\n<h3><b>🔧 Operadores Booleanos Usados</b></h3>\n\n<table border=\'1\'>\n<thead>\n<tr>\n<th>Operador</th>\n<th>Símbolo</th>\n<th>Nome</th>\n<th>Definição</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>AND</td><td>·</td><td>E</td><td>Saída 1 se <strong>todas</strong> as entradas forem 1</td></tr>\n<tr><td>OR</td><td>+</td><td>OU</td><td>Saída 1 se <strong>pelo menos uma</strong> entrada for 1</td></tr>\n<tr><td>NOT</td><td>¬</td><td>NÃO</td><td>Inverte a entrada</td></tr>\n<tr><td>NAND</td><td>↑</td><td>NÃO-E</td><td>Inversão de AND</td></tr>\n<tr><td>NOR</td><td>↓</td><td>NÃO-OU</td><td>Inversão de OR</td></tr>\n<tr><td>XOR</td><td>⊕</td><td>OU-exclusivo</td><td>Saída 1 se as entradas forem <strong>diferentes</strong></td></tr>\n<tr><td>XNOR</td><td>⊙</td><td>OU-exclusivo negado</td><td>Saída 1 se as entradas forem <strong>iguais</strong></td></tr>\n</tbody>\n</table><br>\n\n<h3><b>💡 Notas Importantes</b></h3>\n\n<ul>\n<li>Cada termo da soma representa <strong>um único caso</strong> da tabela verdade onde a função é 1.</li>\n<li>A expressão resultante pode conter muitos termos, especialmente para funções com muitas variáveis (exponencial).</li>\n<li>A <strong>simplificação</strong> da expressão pode ser feita usando <strong>regras da álgebra booleana</strong> ou por meio de <strong>Mapas de Karnaugh (K-map)</strong>.</li>\n</ul><br>\n\n<h3><b>🧮 Vantagens da Forma Soma de Produtos</b></h3>\n\n<ul>\n<li><strong>Determinística</strong>: sempre é possível construí-la diretamente da tabela verdade.</li>\n<li><strong>Base para simplificação</strong>: oferece uma forma \'bruta\' da função, útil para aplicar técnicas de redução.</li>\n<li><strong>Implementação direta</strong>: pode ser mapeada facilmente em circuitos digitais (com portas AND, OR e NOT).</li>\n</ul><br>\n\n<h3><b>📉 Desvantagem</b></h3>\n\n<ul>\n<li>Para funções grandes, a SoP pode gerar expressões <strong>longas e redundantes</strong>, dificultando a análise e a implementação direta sem simplificação.</li>\n</ul><br>\n\n<h3>🔧 Exemplo de Simplificação (extra opcional)</h3>\n\n<p>A expressão:</p><br>\n\n<p><b>F = ¬A·¬B·C + ¬A·B·C + A·¬B·¬C + A·B·¬C</p></b><br>\n\n<p>Pode ser simplificada aplicando distributiva, fatorações ou com K-map (isso fica pra outra explicação, se você quiser depois).</p><br>\n','2025-06-22 09:58:42',1,'Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry\'s standard dummy text ever since the 1500s.'),(5,1,'Code Highlight Test','code-highlight-test','<pre><code class=\"language-typescript\">\nprivate function Find(param1:uint, param2:uint) : b2Pair\n{\n    var _loc4_:uint = 0;\n    if(param1 > param2)\n    {\n    _loc4_ = param1;\n    param1 = param2;\n    param2 = _loc4_;\n    }\n    var _loc3_:uint = uint(Hash(param1,param2) & b2Pair.b2_tableMask);\n    return this.FindHash(param1,param2,_loc3_);\n}\n</code></pre>\n','2025-06-27 23:06:51',1,'Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry\'s standard dummy text ever since the 1500s.'),(12,1,'Como aprendi a programar desmontando jogos em Flash','como-aprendi-a-programar-desmontando-jogos-em-flash','<p>Comecei a programar por volta dos 11 anos. E foi uma grande mudança, já que não possuía muita afinidade com computadores - nenhuma, basicamente. Eu mal sabia instalar um programa.</p><br>\n\n<p>Tudo começou em um jogo de navegador, que rodava no finado Flash Player, que havia acabado de conhecer e comecei a passar horas jogando.</p><br>\n\n<p>Um certo dia estava jogando e vi um jogador fazendo algo que até então não seria possível no jogo: ele estava se movendo muito rápido, voando e aparecendo instantaneamente em lugares diferentes do mapa. Achei aquilo muito legal e fui atrás de entender do que se tratava.</p><br>\n\n<p>Não foi muito difícil encontrar o que aquele jogador estava usando. Haviam sites públicos, com uma comunidade considerável, que postavam regularmente trainers que modificavam o jogo e davam vantagens para o jogador.</p><br>\n\n<p>Tratei logo de baixar e quando finalmente injetei a trapaça no jogo, pra minha surpresa, não havia a mesma graça que eu acreditei que teria. O jogo perdeu totalmente o significado e junto com isso se perdia também o sentido de continuar usando.</p><br>\n\n<p>Após isso, meu interesse deixou de ser usar e passou a ser entender como era feito e isso não foi tão fácil de encontrar, como se fosse um segredo.</p><br> \n\n<p>Depois de refletir muito, pensei que como os trainers modificavam o jogo, se eu tivesse o arquivo original do jogo e o arquivo alterado, eu poderia comparar eles e verificar o que havia sido alterado.</p><br>\n\n<p>Algumas coisas não eram difíceis de descobrir, como por exemplo, que o jogo é feito em flash e que haviam softwares que faziam a descompilação do arquivo do jogo. Porém, eu ainda precisaria encontrar uma forma de obter o arquivo do jogo.</p><br> \n\n<p>Depois de procurar bastante, encontrei um executável (bem duvidoso) chamado SWF Memory Dumper (SMD). A única coisa que eu sabia era que havia um processo chamado \'FlashPlayer.exe\' e que eu precisava selecionar ele e clicar em alguns botões e o arquivo do jogo era baixado no meu computador.</p><br>\n\n<p>Como eu era um completo ignorante no assunto, não sabia exatamente o que eu estava fazendo, apenas que precisva fazer.</p><br>\n\n<p>Mais tarde eu entendi que o jogo era feito em Flash, com uma linguagem de programação chamada ActionScript 3 (AS3).</p><br> \n\n<p>O processo de compilação gerava um arquivo de extensão .SWF (Shockwave Flash) que servia como um container para todos os assets do projeto como imagens, sons, os metadados e também o bytecode (ABC).</p><br> \n\n<p>A compilação transformava o código AS3 em um código intermediário chamado Action Script Bytecode (ABC) e esse ABC era interpretado pela máquina virtual (AVM2) chamada FlashPlayer.</p><br>\n\n<p>Cada Bytecode é um valor binário, que possui um nome correspondente para facilitar a compreensão e que vai ser interpretado pela máquina virtual.</p><br> \n\n<p>Outra linguagem que usa bytecodes, máquina virtual e é interpretada é o Java.</p><br>\n\n<p><b>Exemplo de ABC:</b></p><br>\n\n<pre><code class=\"language-typescript\">\ntrait method QName(PackageNamespace(\"\"),\"Initialize\")\n   dispid 0\n   method\n      name null\n      param QName(PackageNamespace(\"Box2D.Collision\"),\"b2BroadPhase\")\n      param QName(PackageNamespace(\"Box2D.Collision\"),\"b2PairCallback\")\n      returns QName(PackageNamespace(\"\"),\"void\")\n      \n      body\n         maxstack 2\n         localcount 3\n         initscopedepth 4\n         maxscopedepth 5\n         \n         code\n            ; d0\n            getlocal0\n            ; 30\n            pushscope\n            ; d0\n            getlocal0\n            ; d1\n            getlocal1\n            ; 68 e3 04\n            initproperty QName(PackageNamespace(\"\"),\"m_broadPhase\")\n            ; d0\n            getlocal0\n            ; d2\n            getlocal2\n            ; 68 ba 0a\n            initproperty QName(PackageNamespace(\"\"),\"m_callback\")\n            ; 47\n            returnvoid\n         end ; code\n      end ; body\n   end ; method\nend ; trait\n</code></pre><br>\n\n<p>Na memória, os bytes formariam a sequência:</p><br>\n\n<pre><code class=\"language-typescript\">\nd0 30 d0 d1 68 e3 04 d0 d2 68 ba 0a 47 \n</code></pre><br>\n\n<p>O que o SMD fazia era procurar nas região da memória virtual da AVM2 os bytes do ABC e dos componentes da SWF, que haviam sido armazenados durante a execução e então gerava um novo arquivo contendo esses bytes.</p><br>\n\n<p>Exemplo de uma região da memória da máquina virtual em que o ABC eram armazenados durante a execução:</p><br>\n\n<img src=\"/images/x64dbg.png\" alt=\"Imagem mostrando uma lista de regiões da memória virtual usada pela AVM2\"><br><br> \n\n<p>Durante o processo eu tive algumas sortes, como por exemplo, não ter que lidar e nem saber da existência do processo de compressão e descompressão do arquivo SWF. Isso não foi um empecilho, já que quando o arquivo SWF é carregado pela máquina virtual ela faz a descompressão. Então quando o SMD baixava os bytes, eles já estavam sem compressão.</p><br> \n\n<p>Mais pra frente aprendi que os 3 primeiros bytes do arquivo SWF indicavam se o SWF estava comprimido ou não e os possíveis valores eram: FWS para sem compressão (0x46 0x57 0x53), CWS para compressão a partir do byte 8 (0x43 0x57 0x53) e ZWS para compressão a partir do byte 12 (0x5A 0x57 0x53).</p><br>\n\n<p>Os tutorias que ensinavam a usar os trainer seguiam o mesmo padrão: primeiro se abria o jogo e o deixava na tela de login sem apertar em nenhuma tecla e sem clicar em nada. Posteriormente se abria o trainer, marcava as checkboxs e então se podia entrar no jogo. Sempre segui isso sem entender exatamente o porque, mas depois também aprendi que o AVM2 usava algo chamado Just-In-Time Compiler (JIT Compiler). Isso signfica que o ABC que é gerado durante a compilação, na hora em que era executado pela AVM2 era convertido em código de máquina propriamente dito. </p><br> \n\n<p>Porém, esse processo só era feito de acordo com o que fosse executado. Por exemplo: imagine que há uma função que ouve eventos de teclado. Ela só vai ser lida e convertida pra código de máquina se durante a execução do jogo uma tecla for pressionada. A partir do momento que a função foi executada e convertida pra código de máquina, o ABC daquela função não vai ser mais lido e consequentemente não adiantaria mais editar ele.</p><br>\n\n<p>Por isso primeiro se abria o jogo e o deixava na tela de login, pois a maioria das funções não seriam usadas e conseguentemente o ABC não seria convertido em código de máquina, permitindo alterar o ABC. Portanto se alterava o ABC, entrava no jogo e quando a função fosse executada, o ABC alterado seria convertido em código de máquina e a alteração seria aplicada no jogo.</p><br> \n\n<p>Então nesse ponto eu já sabia baixar o arquivo .SWF do jogo e eu já sabia que eu poderia usar descompiladores como o Sothink SWF Decompiler ou o JPEXS Free Flash Decompiler pra visualizar o código \'original\'.</p><br> \n\n<p>Os decompiladores mostram um código ActionScript 3 correspondente ao ABC (bytecode) que está dentro do .SWF. Porém, esse AS3 que é mostrado não é exatamente o mesmo que foi programado pelo desenvolvedor, já que a compilação utiliza otimizações que fazem com que a estrutura do completa do código original seja perdida.</p><br> \n\n<p>Exemplo de Action Script Bytecode e seu correspondente em ActionScript 3:</p><br>\n\n<p><b>ABC:</b></p><br>\n\n<pre><code class=\"language-typescript\">\ntrait method QName(PrivateNamespace(null,\"19\"),\"Find\")\n   dispid 0\n   method\n      name null\n      param QName(PackageNamespace(\"\"),\"uint\")\n      param QName(PackageNamespace(\"\"),\"uint\")\n      returns QName(PackageNamespace(\"Box2D.Collision\"),\"b2Pair\")\n      \n      body\n         maxstack 4\n         localcount 5\n         initscopedepth 4\n         maxscopedepth 5\n         \n         code\n            getlocal0\n            pushscope\n            pushbyte 0\n            convert_u\n            setlocal 4\n            getlocal1\n            getlocal2\n            ifngt ofs0018\n            getlocal1\n            convert_u\n            setlocal 4\n            getlocal2\n            convert_u\n            setlocal1\n            getlocal 4\n            convert_u\n            setlocal2\n   ofs0018:\n            findpropstrict QName(PackageNamespace(\"\"),\"Hash\")\n            getlocal1\n            getlocal2\n            callproperty QName(PackageNamespace(\"\"),\"Hash\"), 2\n            getlex QName(PackageNamespace(\"Box2D.Collision\"),\"b2Pair\")\n            getproperty QName(PackageNamespace(\"\"),\"b2_tableMask\")\n            bitand\n            convert_u\n            setlocal3\n            getlocal0\n            getlocal1\n            getlocal2\n            getlocal3\n            callproperty QName(PrivateNamespace(null,\"19\"),\"FindHash\"), 3\n            returnvalue\n         end ; code\n      end ; body\n   end ; method\nend ; trait\n</code></pre><br>\n\n<p><b>ActionScript 3:</b></p><br>\n\n<pre><code class=\"language-typescript\">\nprivate function Find(param1:uint, param2:uint) : b2Pair\n{\n    var _loc4_:uint = 0;\n    if(param1 > param2)\n    {\n    _loc4_ = param1;\n    param1 = param2;\n    param2 = _loc4_;\n    }\n    var _loc3_:uint = uint(Hash(param1,param2) & b2Pair.b2_tableMask);\n    return this.FindHash(param1,param2,_loc3_);\n}\n</code></pre><br>\n\n<p>A partir daí, bastava eu usar o SMD no jogo pra baixar o arquivo original, depois injetar o trainer no jogo e baixar o arquivo do jogo alterado e então comparar os dois arquivos para entender o que havia sido feito.</p><br> \n\n<p>Esse processo seria simples, se não fosse pelo fato do jogo ter milhares de linha de código.</p><br> \n\n<p>Depois de procurar muito e quase desistir várias vezes, acabei encontrando trechos que estavam diferentes, porém eu ainda não sabia nada sobre programação e não conseguia dizer o que e nem porque havia sido feito, apesar de estar olhando.</p><br>\n\n<p>Foi partir de então que comecei a de fato aprender a programar. Comecei a ver vídeos, tutoriais em sites, a visitar fóruns e etc.</p><br> \n\n<p>Queria poder dizer que meu aprendizado foi rápido e que rapidamente comecei a programar e a desenvolver softwares adoidado, mas não foi o que aconteceu.</p><br> \n\n<p>Naquela época eu não sabia estudar e o pouco conhecimento que eu tinha me fez me acomodar e era o suficiente para que eu não me aprofundasse. Na verdade eu nem saberia como me aprofundar, não sabia nem o que era uma documentação.</p><br> \n\n<p>No fim eu não tinha o objetivo de criar algo de fato e sim apenas modificar algo que já existia.</p><br>\n\n<p>Aprendi o suficiente da linguagem e do bytecode para conseguir fazer minhas próprias alterações sem quebrar o jogo.</p><br> \n\n<p>A princípio, eu apenas alterava trechos bytes que já existiam, eu não conseguia adicionar mais bytes porque o jogo travava.</p><br> \n\n<p>Mais pra frente eu descobri que há uma região no header da SWF que determina o tamanho em bytes do arquivo, e se estiver diferente do tamanho real, a SWF quebra ou não carrega. Isso acontece pois quando a AVM2 usa o tamanho especificado para definir o tamanho da memória a ser alocada para armazenar os bytes da SWF.</p><br>\n\n<p>Então eu procurava algum trecho de código, visualizava o bytecode, fazia minhas alterações, usava algum programa que busca sequências de bytes (Array of Bytes) na memória usada pelo processo (nesse caso a AVM2) e então substituía pela minha sequência de bytes alterada. Por exemplo:</p><br>\n\n<p>Digamos que queremos fazer que quando eu aperte uma tecla, meu jogador suba. Ele vai apenas subir verticalmente, não vai pular, não vai ter nenhum tipo de verificação, apenas subir. </p><br>\n\n<p></p><br>Primeiro, procuramos a função que lida com os eventos de teclado e então procuramos algum trecho pra alterar. No trecho a seguir é verificado se a tecla shift é pressionada e então ele rotaciona um objeto se houver um objeto selecionado e não estiver criando nada:</p><br>\n\n<pre><code class=\"language-typescript\">\nprivate function keyDownListener(param1:KeyboardEvent) : void\n{\n   var _loc2_:int = int(param1.keyCode);\n   // ...\n   else if(_loc2_ == 88 || _loc2_ == 16)\n   {\n      if(Boolean(this.CurrentObject) && !this.SummoninginProgress)\n      {\n         this.CurrentObject.rotation += 15;\n      }\n   }\n}\n</code></pre><br>\n\n<p>Por conta das otimizações feitas na hora da compilação, alguns nomes de variáveis são perdidos.</p><br>\n\n<p>Nesse caso, _loc2_ armazenará o valor da tecla que foi pressionada e vai ser usada para verificar se a tecla pressionada corresponde a um determinado valor.</p><br> \n\n<p>Se o valor de _loc2_ for 88, código da tecla \'X\', ou 16, código da tecla \'shift\', o código de dentro vai ser executado.</p><br> \n\n<p>O que queremos alterar realmente é a parte de dentro, que é executada quando é identificado que a tecla shift foi pressionada:</p><br>\n\n<pre><code class=\"language-typescript\">\nif(Boolean(this.CurrentObject) && !this.SummoninginProgress)\n{\n    this.CurrentObject.rotation += 15;\n}\n</code></pre><br>\n\n<p>O bytecode seria:</p><br>\n\n<pre><code class=\"language-typescript\">\n    ; d0\n    getlocal0\n    ; 66 a1 02\n    getproperty QName(PackageNamespace(\"\"),\"CurrentObject\")\n    ; 76\n    convert_b\n    ; 2a\n    dup\n    ; 12 06 00 00\n    iffalse ofs0455\n    ; 29\n    pop\n    ; d0\n    getlocal0\n    ; 66 c5 02\n    getproperty QName(PackageNamespace(\"\"),\"SummoninginProgress\")\n    ; 96\n    not\n    ; 12 11 00 00\nofs0455:\n    iffalse ofs046a\n    ; d0\n    getlocal0\n    ; 66 a1 02\n    getproperty QName(PackageNamespace(\"\"),\"CurrentObject\")\n    ; d0\n    getlocal0\n    ; 66 a1 02\n    getproperty QName(PackageNamespace(\"\"),\"CurrentObject\")\n    ; 66 b8 17\n    getproperty QName(PackageNamespace(\"\"),\"rotation\")\n    ; 24 0f\n    pushbyte 15\n    ; a0\n    add\n    ; 61 b8 17\n    setproperty QName(PackageNamespace(\"\"),\"rotation\")\n</code></pre><br>\n\n<p>Note que parece que no ABC as linhas seguem uma ordem invertida (na maior parte das vezes) se comparado ao código AS3 que foi escrito. Isso se dá porque o AVM2 implementa um sistema de STACK semelhante (semelhante com muitas aspas) ao que ocorre em Assembly, onde o último elemento adicionado na pilha é removido/acessado.</p>\n\n<p>O Array of Bytes desse ABC seria:</p><br>\n\n<pre><code class=\"language-typescript\">\nd0 66 a1 02 76 2a 12 06 00 00 29 d0 66 c5 02 96 12 11 00 00 d0 66 a1 02 d0 66 a1 02 66 b8 17 24 0f a0 61 b8 17 \n</code></pre><br>\n\n<p>Eu sei que o jogo usa uma biblioteca de física 2d chamada Box2D, e seguindo a documentação, pra mover um objeto, seria preciso acessar a propriedade y, que pertence ao objeto m_linearVelocity (responsável pela velocidade dos objetos no mundo físico), que por sua vez pertence ao objeto Physique, que pertence ao objeto Player:</p><br>\n\n<pre><code class=\"language-typescript\">\nthis.Player.Physique.m_linearVelocity.y = -5\n</code></pre><br>\n\n<p>Porém, pra conseguir usar isso de fato, eu preciso do bytecode de cada objeto. Buscando um por um, pra nós mesmos montarmos, ficaria algo assim:</p><br>\n\n<pre><code class=\"language-typescript\">\nthis = d0 // getlocal0\nPlayer = 66 9b 01 // getproperty QName(PackageNamespace(\"\"),\"Player\")\nPhysique = 66 f7 04 // getproperty QName(PackageNamespace(\"\"),\"Physique\")\nm_linearVelocity = 66 b1 07 // getproperty QName(PackageNamespace(\"\"),\"m_linearVelocity\")\n-5 = 24 fb // pushbyte -5\ny = 61 e2 05 // setproperty QName(PackageNamespace(\"\"),\"y\")\n</code></pre><br>\n\n<p>E o Array of Bytes:</p><br>\n\n<pre><code class=\"language-typescript\">\nd1 66 9b 01 66 f7 04 66 b1 07 24 fb 61 e2 05\n</code></pre><br>\n\n<p>Note que enquanto estamos apenas acessando uma propriedade, o bytecode começa com o byte 66. Quando estamos atribuindo um valor, o bytecode começa com 61 e o valor que vai ser atribuído fica logo acima (24 fb).</p><br> \n\n<p>Se quisermos atribuir um valor a m_linearVelocity, por exemplo, poderíamos alterar o 66 por 61 e passar o valor acima dele:</p><br>\n\n<pre><code class=\"language-typescript\">\nthis.Player.Physique.m_linearVelocity = null;\n</code></pre><br>\n\n<p>fica assim:</p><br>\n\n<pre><code class=\"language-typescript\">\nthis = d0 // getlocal0\nPlayer = 66 9b 01 // getproperty QName(PackageNamespace(\"\"),\"Player\")\nPhysique = 66 f7 04 // getproperty QName(PackageNamespace(\"\"),\"Physique\")\nnull = 20 // pushnull\nm_linearVelocity = 61 b1 07 // getproperty QName(PackageNamespace(\"\"),\"m_linearVelocity\")\n</code></pre><br>\n\n<p>Voltando, então agora temos os Arrays of Bytes que serão alterados e os que colocaremos no lugar:</p><br>\n\n<pre><code class=\"language-typescript\">\nd0 66 a1 02 76 2a 12 06 00 00 29 d0 66 c5 02 96 12 11 00 00 d0 66 a1 02 d0 66 a1 02 66 b8 17 24 0f a0 61 b8 17 \n>\nd1 66 9b 01 66 f7 04 66 b1 07 24 fb 61 e2 05\n</code></pre><br>\n\n<p>Claramente eles são de tamanhos diferentes, e como mencionei anteriormente, no header do arquivo diz quantos bytes ele possui e se houver divergência, o jogo irá parar de funcionar.</p><br> \n\n<p>Podemos contornar isso colocando um bytecode NOP, que possui o valor 02 e que não realiza nenhuma operação quando é interpretado, mas que pode ser usado para cobrir espaços vazíos.</p><br>\n\n<p>Os Arrays of Bytes então ficariam assim:</p><br>\n\n<pre><code class=\"language-typescript\">\nd0 66 a1 02 76 2a 12 06 00 00 29 d0 66 c5 02 96 12 11 00 00 d0 66 a1 02 d0 66 a1 02 66 b8 17 24 0f a0 61 b8 17\n>\nd1 66 9b 01 66 f7 04 66 b1 07 24 fb 61 e2 05 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 \n</code></pre><br>\n\n<p>Agora, usaremos algum software que faça manipulações na memória usada por um processo para modificar os bytes que estão sendo usados pela AVM2. Procuramos pelo primeiro Array of Byte e então substituímos pelo Array of Bytes que montamos:</p><br>\n\n<img src=\"/images/ce-image.png\" alt=\"Imagem mostrando a alteração do Array of Byte original pelo alterado no software CheatEngie.\"><br><br> \n\n<p>Quando apertarmos shift dentro do jogo, ao invés de executar o código que realizava a verificação se havia um objeto selecionado e não estava criando nada e que executava a rotação do objeto selecionado, agora vai executar o código que faz com que o jogador suba verticalmente (também conhecido como voar).</p><br> \n\n<p>Se baixarmos o arquivo do jogo da memória após termos alterado, veríamos algo como:</p><br>\n\n<pre><code class=\"language-typescript\">\nprivate function keyDownListener(param1:KeyboardEvent) : void\n{\n   var _loc2_:int = int(param1.keyCode);\n   // ...\n   else if(_loc2_ == 88 || _loc2_ == 16)\n   {\n      this.Player.Physique.m_linearVelocit.y = -5;\n   }\n}\n</code></pre><br>\n\n<p>Fiquei bons anos limitado pela minha falta de visão, preso no pouco conhecimento que eu tinha e na minha ignorância de achar que o que eu sabia era o suficiente.</p><br> \n\n<p>Com o tempo o FlashPlayer foi descontinuado oficialmente e esse meu conhecimento não podia mais ser aplicado diretamente.</p><br> \n\n<p>Parei de programar por alguns anos, comecei a estudar e a me interessar por outros assuntos e em um dado momento eu percebi que havia de fato aprendido a estudar e a gostar de estudar. Então voltei para a programação e continuo até hoje.</p><br>\n\n','2025-06-29 01:24:42',1,'Comecei a programar aos 11 por curiosidade com modificações em um jogo Flash. Em vez de usar, foquei em entender como eram feitas. Aprendi engenharia reversa e a alterar o ByteCode do jogo...'),(13,1,'asdddddddddddddddddddddddddddddddddddd','asdddddddddddddddddddddddddddddddddddd','asddddddddddddddddddddddddddddddddddddasddddddddddddddddddddddddddddddddddddasddddddddddddddddddddddddddddddddddddasddddddddddddddddddddddddddddddddddddasdddddddddddddddddddddddddddddddddddd','2025-07-05 10:57:25',1,'asddddddddddddddddddddddddddddddddddddasdddddddddddddddddddddddddddddddddddd'),(15,1,'dfsdfsdfsdf','dfsdfsdfsdf','dfsdfsdfsdfsdfsdf','2025-07-05 10:58:30',1,'sdfsdfsdfsdfsdfsdfs'),(16,1,'sadfasdfsad','sadfasdfsad','sdfasfasdfasfsadfsadfsadf','2025-07-05 10:58:48',1,'dfsadfasdf'),(17,1,'ddddddd','ddddddd','dddddddddddddddd','2025-07-05 10:59:24',1,'ddddddddddddddddd');
/*!40000 ALTER TABLE `posts` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `users`
--

DROP TABLE IF EXISTS `users`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `users` (
  `id` int NOT NULL AUTO_INCREMENT,
  `username` varchar(50) COLLATE utf8mb4_unicode_ci NOT NULL,
  `name` varchar(100) COLLATE utf8mb4_unicode_ci NOT NULL,
  `email` varchar(100) COLLATE utf8mb4_unicode_ci NOT NULL,
  `creation_date` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `password` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  `permission` tinyint NOT NULL DEFAULT '0',
  PRIMARY KEY (`id`),
  UNIQUE KEY `username` (`username`),
  UNIQUE KEY `email` (`email`),
  CONSTRAINT `chk_permission_range` CHECK ((`permission` between 0 and 10))
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `users`
--

LOCK TABLES `users` WRITE;
/*!40000 ALTER TABLE `users` DISABLE KEYS */;
INSERT INTO `users` VALUES (1,'lucaslapaz','Lucas Lapaz','jorgeescolaceal@gmail.com','2025-06-21 03:24:37','$2b$12$i24zCLVN.qxPUc41GrXtReHosmIGhejD8rjBTnHt8g1t3UEJedSJO',10),(3,'admin','Admin','contact@example.com','2025-07-05 12:03:31','$2b$12$6mxsKPpN71LxTBk2cMr3TuY38mYkpOFIqMYYaNew23YDHhWBXzt4e',10);
/*!40000 ALTER TABLE `users` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2025-07-06  5:55:54
